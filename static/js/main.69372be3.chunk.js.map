{"version":3,"sources":["Components/connectWalletPage.js","constants/chains.js","constants/coins.js","ethereumFunctions.js","network.js","NavBar/MenuItems.js","NavBar/NavBar.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","Components/LoadingButton.js","Components/wrongNetwork.js","CoinSwapper/CoinSwapper.js","Liquidity/SwitchButton.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/Liquidity.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","paperContainer","borderRadius","spacing","padding","paddingBottom","maxWidth","margin","marginTop","fullWidth","width","title","textAlign","marginBottom","hr","balance","overflow","buttonIcon","marginRight","footer","ConnectWalletPage","classes","className","Container","Paper","Typography","variant","color","Grid","container","direction","justifyContent","alignItems","href","networks","ChainId","routerAddress","Map","set","COINS","chains","name","abbr","address","imageURI","ROUTER","require","PRC20","FACTORY","PAIR","getNetwork","provider","a","network","chainId","getRouter","signer","Contract","abi","getWeth","getFactory","getAccount","window","ethereum","request","method","accounts","getDecimals","token","decimals","then","result","catch","error","console","log","getBalanceAndSymbol","accountAddress","weth_address","coins","getBalance","balanceRaw","ethers","utils","formatEther","symbol","tokenDecimals","balanceOf","address1","address2","amount","routerContract","tokens","time","Math","floor","Date","now","deadline","BigNumber","from","token1","token1Decimals","amountInToken1","parseUnits","allowance","lt","approve","toString","callStatic","getAmountsOut","amountOut","WPLS","wplsAddress","swapExactPLSForTokens","value","tx","swapExactTokensForPLS","swapExactTokensForTokens","wait","receipt","message","amountIn","token2","token2Decimals","String","values_out","amount_out","Number","fetchReserves","pair","coin1","coin2","coin1Decimals","coin2Decimals","getReserves","reservesRaw","token0","results","factory","getPair","pairAddress","liquidityTokens_BN","liquidityTokens","toPrecision","createTheme","palette","primary","main","contrastText","secondary","Web3Provider","props","useState","isConnected","setConnected","Object","create","useRef","account","chainID","router","weth","backgroundListener","setupConnection","providers","getSigner","includes","get","factory_address","createListener","setInterval","useEffect","current","clearInterval","listener","render","MenuItems","url","cName","NavBar","state","clicked","map","item","index","to","Component","minHeight","backgroundColor","COLORS","borderColor","borderWidth","borderStyle","container_input","marginLeft","container_blank","grid","height","fab","zIndex","input","typography","h5","inputBase","inputBase2","RemoveLiquidityField1","onClick","onChange","activeField","xs","Fab","size","InputBase","placeholder","disabled","root","RemoveLiquidityField2","CoinField","button","paddingTop","display","coinName","opacity","coinImage","CoinButton","coinAbbr","ButtonBase","focusRipple","src","alt","style","styles","dialogContainer","titleSection","titleText","alignSelf","paddingLeft","paddingRight","coinList","overflowY","coinContainer","DialogTitle","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","DialogActions","MuiDialogActions","CoinDialog","open","React","setAddress","setError","exit","Dialog","undefined","paper","TextField","e","target","helperText","coin","Button","autoFocus","err","doesTokenExist","wrapper","position","progress","green","top","left","LoadingButton","loading","valid","success","fail","type","CircularProgress","WrongNetwork","switchButton","CoinSwapper","enqueueSnackbar","useSnackbar","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setCoin1","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","formatReserve","reserve","data","isNaN","getAmountOut","toFixed","coinTimeout","setTimeout","clearTimeout","fontFamily","fontSize","parsedInput1","parsedInput2","isButtonEnabled","swapTokens","autoHideDuration","SwitchButton","setDeploy","changeStyles","K","document","getElementById","ButtonGroup","id","text","amount1","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","currentAllowance1","currentAllowance2","approvalPromises","push","Promise","all","updatedAllowance1","updatedAllowance2","gte","addLiquidityPLS","addLiquidity","liquidity_tokens","liquidity","Getliquidity","approveTx","removeLiquidityPLS","removeLiquidity","quote","reserve1","reserve2","quoteMintLiquidity","amountA","amountB","MINIMUM_LIQUIDITY","_reserveA","_reserveB","totalSupply","reserveA","reserveB","_totalSupply","valueA","valueB","sqrt","min","amountADesired","amountBDesired","amountBOptimal","amountAOptimal","feeTo","feeOn","kLast","_kLast","feeLiquidity","Aout","Bout","background","values","LiquidityDeployer","setLiquidityTokens","liquidityOut","setLiquidityOut","oldField1Value","oldField2Value","field2","NaN","quoteAddLiquidity","networksigner","LiquidityRemover","tokensOut","setTokensOut","parsedInput","quoteRemoveLiquidity","Liquidity","deploy","deploy_or_remove","App","maxSnack","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.69372be3.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n    marginTop: \"200px\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction ConnectWalletPage() {\n  const classes = useStyles();\n  return (\n    <div>\n      <div className=\"Title\">\n        <h1 className=\"navbar-logo\">\n          DexTop Swap\n        </h1>\n      </div>\n\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            color=\"common.grey\"\n          >\n            Connect an Ethereum wallet to use the\n            application \n          </Typography>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Download Wallet{\" \"}\n          <a href=\"https://internetmoney.io/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default ConnectWalletPage;\n","export const networks = [369]\n\nexport const ChainId = {\n  MAINNET: 369,\n \n};\n\nexport const routerAddress = new Map();\nrouterAddress.set(ChainId.MAINNET, \"0xb295DA94Fc54A349c14669AbBD2784A6084C1002\");\n\n","import * as chains from './chains';\n\n// If you add coins for a new network, make sure Weth address (for the router you are using) is the first entry\n\n\n\nconst MAINNETCoins = [\n  {\n    name: \"Pulse\",\n    abbr: \"PLS\",\n    address: \"\", // Weth address is fetched from the router\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/0xA1077a294dDE1B09bB078844df40758a5D0f9a27.png\"\n  },\n  \n  {\n    name: \"PulseX\",\n    abbr: \"PLSX\",\n    address: \"0x95B303987A60C71504D99Aa1b13B4DA07b0790ab\",\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/0x95B303987A60C71504D99Aa1b13B4DA07b0790ab.png\"\n  },\n  {\n    name: \"DAI from eth\",\n    abbr: \"DAI\",\n    address: \"0xefD766cCb38EaF1dfd701853BFCe31359239F305\",\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/0xefD766cCb38EaF1dfd701853BFCe31359239F305.png\"\n  },\n  {\n    name: \"HEX\",\n    abbr: \"HEX\",\n    address: \"0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39\",\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39.png\"\n  },\n  {\n    name: \"HEX BEAR\",\n    abbr: \"HXB\",\n    address: \"0x009a8670E74E1dda3E449E93A9308e5977949967\",\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/0x009a8670E74E1dda3E449E93A9308e5977949967.png\"\n  },\n  {\n    name: \"Hex Orange Address\",\n    abbr: \"HOA\",\n    address: \"0x7901a3569679AEc3501dbeC59399F327854a70fe\",\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/0x7901a3569679AEc3501dbeC59399F327854a70fe.png\"\n  },\n  {\n    name: \"USDL\",\n    abbr: \"USDL\",\n    address: \"0x0dEEd1486bc52aA0d3E6f8849cEC5adD6598A162\",\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/0x0dEEd1486bc52aA0d3E6f8849cEC5adD6598A162.png\"\n  },\n  {\n    name: \"Incentive\",\n    abbr: \"INC\",\n    address: \"0x2fa878Ab3F87CC1C9737Fc071108F904c0B0C95d\",\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/0x2fa878Ab3F87CC1C9737Fc071108F904c0B0C95d.png\"\n  },\n  {\n  name: \"DAI Copy\",\n    abbr: \"pDAI\",\n    address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/0x6B175474E89094C44Da98b954EedeAC495271d0F.png\"\n  },\n  {\n    name: \"Internet Money\",\n    abbr: \"IM\",\n    address: \"0xBBcF895BFCb57d0f457D050bb806d1499436c0CE\",\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/0xBBcF895BFCb57d0f457D050bb806d1499436c0CE.png\"\n  },\n  {\n    name: \"PEPE\",\n    abbr: \"PEPE\",\n    address: \"0x6982508145454Ce325dDbE47a25d4ec3d2311933\",\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/0x6982508145454Ce325dDbE47a25d4ec3d2311933.png\"\n  \n  },\n  {\n    name: \"Richard's Only Brother\",\n    abbr: \"ROB\",\n    address: \"0x1c2766F5949A4aA5d4cf0439067051135ffc1b28\",\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/rob12.png\"\n  },\n  {\n    name: \"pBear\",\n    abbr: \"PBR\",\n    address: \"0x425AEb3Be986442A2f317156d520130ac0d25E3e\",\n    imageURI: \"https://dextop.pro/swap/exe.jpg\"\n  },\n  {\n    name: \"Wrapped Pulse\",\n    abbr: \"WPLS\",\n    address: \"0xA1077a294dDE1B09bB078844df40758a5D0f9a27\",\n    imageURI: \"https://dextop.pro/pulsex/images/tokens/0xA1077a294dDE1B09bB078844df40758a5D0f9a27.png\"\n  },\n]\n\n\nconst COINS = new Map();\nCOINS.set(chains.ChainId.MAINNET, MAINNETCoins);\n\nexport default COINS\n","import { Contract, ethers } from \"ethers\";\nimport * as chains from \"./constants/chains\";\nimport COINS from \"./constants/coins\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst PRC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport function getProvider() {\n  return new ethers.providers.Web3Provider(window.ethereum);\n}\n\nexport function getSigner(provider) {\n  return provider.getSigner();\n}\n\nexport async function getNetwork(provider) {\n  const network = await provider.getNetwork();\n  return network.chainId;\n}\n\nexport function getRouter(address, signer) {\n  return new Contract(address, ROUTER.abi, signer);\n}\n\nexport async function checkNetwork(provider) {\n  const chainId = getNetwork(provider);\n  if (chains.networks.includes(chainId)){\n    return true\n  }\n  return false;\n}\n\nexport function getWeth(address, signer) {\n  return new Contract(address, PRC20.abi, signer);\n}\n\nexport function getFactory(address, signer) {\n  return new Contract(address, FACTORY.abi, signer);\n}\n\nexport async function getAccount() {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n\n  return accounts[0];\n}\n\n//This function checks if a PRC20 token exists for a given address\n//    `address` - The Ethereum address to be checked\n//    `signer` - The current signer\nexport function doesTokenExist(address, signer) {\n  try {\n    return new Contract(address, PRC20.abi, signer);\n  } catch (err) {\n    return false;\n  }\n}\n\nexport async function getDecimals(token) {\n  const decimals = await token.decimals().then((result) => {\n      return result;\n    }).catch((error) => {\n      console.log('No tokenDecimals function for this token, set to 0');\n      return 0;\n    });\n    return decimals;\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(\n  accountAddress,\n  address,\n  provider,\n  signer,\n  weth_address,\n  coins\n) {\n  try {\n    if (address === weth_address) {\n      const balanceRaw = await provider.getBalance(accountAddress);\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: coins[0].abbr,\n      };\n    } else {\n      const token = new Contract(address, PRC20.abi, signer);\n      const tokenDecimals = await getDecimals(token);\n      const balanceRaw = await token.balanceOf(accountAddress);\n      const symbol = await token.symbol();\n\n      return {\n        balance: balanceRaw*10**(-tokenDecimals),\n        symbol: symbol,\n      };\n    }\n  } catch (error) {\n    console.log ('The getBalanceAndSymbol function had an error!');\n    console.log (error)\n    return false;\n  }\n}\n\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to PRC20 token, PRC20 token to AUT, and PRC20 token to PRC20 token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing the value of address1's token to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `signer` - The current signer\nexport async function swapTokens(\n  address1,\n  address2,\n  amount,\n  routerContract,\n  accountAddress,\n  signer\n) {\n  const tokens = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, PRC20.abi, signer);\n  const token1Decimals = await getDecimals(token1);\n  const amountInToken1 = ethers.utils.parseUnits(amount, token1Decimals);\n\n  // Check current allowance for token1\n  const currentAllowanceToken1 = await token1.allowance(accountAddress, routerContract.address);\n\n  // Approve token1 if needed\n  if (currentAllowanceToken1.lt(amountInToken1)) {\n    console.log('Insufficient allowance for token1. Attempting approval...');\n\n    try {\n      console.log(`Approving ${token1.address} transfer...`);\n      await token1.approve(routerContract.address, amountInToken1);\n      console.log(`Approved ${token1.address} transfer for ${amountInToken1.toString()}`);\n\n      // Once approval is successful, proceed with the swap\n      const amountOut = await routerContract.callStatic.getAmountsOut(amountInToken1, tokens);\n      const wplsAddress = await routerContract.WPLS();\n\n      try {\n        let tx;\n        if (address1 === wplsAddress) {\n          // Eth -> Token\n          tx = await routerContract.swapExactPLSForTokens(\n            amountOut[1],\n            tokens,\n            accountAddress,\n            deadline,\n            { value: amountInToken1 }\n          );\n        } else if (address2 === wplsAddress) {\n          // Token -> Eth\n          tx = await routerContract.swapExactTokensForPLS(\n            amountInToken1,\n            amountOut[1],\n            tokens,\n            accountAddress,\n            deadline\n          );\n        } else {\n          tx = await routerContract.swapExactTokensForTokens(\n            amountInToken1,\n            amountOut[1],\n            tokens,\n            accountAddress,\n            deadline\n          );\n        }\n\n        const receipt = await tx.wait(); // Wait for transaction confirmation\n        console.log('Transaction successful. Transaction receipt:', receipt);\n      } catch (error) {\n        console.error('Error swapping tokens:', error.message);\n      }\n    } catch (error) {\n      console.error('Error approving token transfer:', error.message);\n    }\n  } else {\n    console.log(`Sufficient allowance for ${token1.address} transfer exists.`);\n    // If the allowance is sufficient, proceed with the swap directly\n    const amountOut = await routerContract.callStatic.getAmountsOut(amountInToken1, tokens);\n    const wplsAddress = await routerContract.WPLS();\n\n    try {\n      let tx;\n      if (address1 === wplsAddress) {\n        // Eth -> Token\n        tx = await routerContract.swapExactPLSForTokens(\n          amountOut[1],\n          tokens,\n          accountAddress,\n          deadline,\n          { value: amountInToken1 }\n        );\n      } else if (address2 === wplsAddress) {\n        // Token -> Eth\n        tx = await routerContract.swapExactTokensForPLS(\n          amountInToken1,\n          amountOut[1],\n          tokens,\n          accountAddress,\n          deadline\n        );\n      } else {\n        tx = await routerContract.swapExactTokensForTokens(\n          amountInToken1,\n          amountOut[1],\n          tokens,\n          accountAddress,\n          deadline\n        );\n      }\n\n      const receipt = await tx.wait(); // Wait for transaction confirmation\n      console.log('Transaction successful. Transaction receipt:', receipt);\n    } catch (error) {\n     \n    }\n  }\n}\n\n\n\n//This function returns the conversion rate between two token addresses\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\n//    `amountIn` - Amount of the token at address 1 to be swaped from\n//    `routerContract` - The router contract to carry out this swap\nexport async function getAmountOut(\n  address1,\n  address2,\n  amountIn,\n  routerContract,\n  signer\n) {\n  try {\n    const token1 = new Contract(address1, PRC20.abi, signer);\n    const token1Decimals = await getDecimals(token1);\n\n    const token2 = new Contract(address2, PRC20.abi, signer);\n    const token2Decimals = await getDecimals(token2);\n\n    const values_out = await routerContract.getAmountsOut(\n      ethers.utils.parseUnits(String(amountIn), token1Decimals),\n      [address1, address2]\n    );\n    const amount_out = values_out[1]*10**(-token2Decimals);\n    console.log('amount out: ', amount_out)\n    return Number(amount_out);\n  } catch {\n    return false;\n  }\n}\n\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the token to trade from (either a PRC20 token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a PRC20 token or AUT)\n//    `pair` - The pair contract for the two tokens\nexport async function fetchReserves(address1, address2, pair, signer) {\n  try {\n\n    // Get decimals for each coin\n    const coin1 = new Contract(address1, PRC20.abi, signer);\n    const coin2 = new Contract(address2, PRC20.abi, signer);\n\n    const coin1Decimals = await getDecimals(coin1);\n    const coin2Decimals = await getDecimals(coin2);\n\n    // Get reserves\n    const reservesRaw = await pair.getReserves();\n\n    // Put the results in the right order\n    const results =  [\n      (await pair.token0()) === address1 ? reservesRaw[0] : reservesRaw[1],\n      (await pair.token1()) === address2 ? reservesRaw[1] : reservesRaw[0],\n    ];\n\n    // Scale each to the right decimal place\n    return [\n      (results[0]*10**(-coin1Decimals)),\n      (results[1]*10**(-coin2Decimals))\n    ]\n  } catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0];\n  }\n}\n\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(\n  address1,\n  address2,\n  factory,\n  signer,\n  accountAddress\n) {\n  try {\n    const pairAddress = await factory.getPair(address1, address2);\n    const pair = new Contract(pairAddress, PAIR.abi, signer);\n  \n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\n  \n      const reservesRaw = await fetchReserves(address1, address2, pair, signer);\n      const liquidityTokens_BN = await pair.balanceOf(accountAddress);\n      const liquidityTokens = Number(\n        ethers.utils.formatEther(liquidityTokens_BN)\n      );\n    \n      return [\n        reservesRaw[0].toPrecision(12),\n        reservesRaw[1].toPrecision(12),\n        liquidityTokens,\n      ];\n    } else {\n      console.log(\"no reserves yet\");\n      return [0,0,0];\n    }\n  }catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0, 0];\n  }\n}\n","import { useEffect, useState, useRef } from \"react\";\nimport { Contract, ethers } from \"ethers\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\nimport {\n  getAccount,\n  getFactory,\n  getRouter,\n  getNetwork,\n  getWeth,\n} from \"./ethereumFunctions\";\nimport COINS from \"./constants/coins\";\nimport * as chains from \"./constants/chains\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nconst autoReconnectDelay = 50000;\n\nconst Web3Provider = (props) => {\n  const [isConnected, setConnected] = useState(true);\n  let network = Object.create( {} )\n  network.provider = useRef(null);\n  network.signer = useRef(null);\n  network.account = useRef(null);\n  network.coins = [];\n  network.chainID = useRef(null);\n  network.router = useRef(null);\n  network.factory = useRef(null);\n  network.weth = useRef(null);\n  const backgroundListener = useRef(null);\n  async function setupConnection() {\n    try {\n      console.log('lets go!');\n      network.provider = new ethers.providers.Web3Provider(window.ethereum);\n      network.signer = await network.provider.getSigner();\n      await getAccount().then(async (result) => {\n        network.account = result;\n      });\n\n      await getNetwork(network.provider).then(async (chainId) => {\n        // Set chainID\n        network.chainID = chainId;\n        if (chains.networks.includes(chainId)) {\n          // Get the router using the chainID\n          network.router = await getRouter(\n            chains.routerAddress.get(chainId),\n            network.signer\n          );\n          // Get default coins for network\n          network.coins = COINS.get(chainId);\n          // Get Weth address from router\n          await network.router.WPLS().then((wplsAddress) => {\n            network.weth = getWeth(wplsAddress, network.signer);\n            // Set the value of the weth address in the default coins array\n            network.coins[0].address = wplsAddress;\n          });\n          // Get the factory address from the router\n          await network.router.factory().then((factory_address) => {\n            network.factory = getFactory(\n              factory_address,\n              network.signer\n            );\n          });\n          setConnected(true);\n        } else {\n          console.log(\"Wrong network mate.\");\n          setConnected(false);\n        }\n      });\n\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async function createListener() {\n    return setInterval(async () => {\n      // console.log(\"Heartbeat\");\n      try {\n        // Check the account has not changed\n        const account = await getAccount();\n        if (account != network.account) {\n          await setupConnection();\n        }\n        // const chainID = await getNetwork(network.provider);\n        // if (chainID !== network.chainID){\n        //   setConnected(false);\n        //   await setupConnection();\n        // }\n      } catch (e) {\n        setConnected(false);\n        await setupConnection();\n      }\n    }, 1000);\n  }\n\n  useEffect(async () => {\n    // Initial setup\n    console.log(\"Initial hook\");\n    await setupConnection();\n    console.log(\"network: \", network);\n\n    // Start background listener\n    if (backgroundListener.current != null) {\n      clearInterval(backgroundListener.current);\n    }\n    const listener = createListener();\n    backgroundListener.current = listener;\n    return () => clearInterval(backgroundListener.current);\n  }, []);\n\n  const renderNotConnected = () => {\n    console.log(\"Rendering\");\n    return (\n      <div className=\"App\">\n        <div>\n          <ConnectWalletPage />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {!isConnected && renderNotConnected()}\n      {isConnected && <div> {props.render(network)}</div>}\n    </>\n  );\n};\n\nexport default Web3Provider;\n","export const MenuItems = [\n  {\n    title: \"Swap\",\n    url: \"/swap/\",\n    cName: \"nav-links\",\n  },\n  {\n    title: \"Liquidity\",\n    url: \"/swap/liquidity\",\n    cName: \"nav-links\",\n  },\n];\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  state = { clicked: false };\n\n  render() {\n    return (\n      <nav>\n        <div className=\"Title\">\n       \n          <h3 className=\"navbar-logo\">\n            \n            \n          </h3>\n        </div>\n\n        <div className=\"NavbarItems\">\n          <ul className={`nav-menu`}>\n            {MenuItems.map((item, index) => {\n              return (\n                <li key={index}>\n                  <Link className={\"nav-links\"} to={item.url}>\n                    {item.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    backgroundColor: COLORS.green[900],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.green[400],\n    borderWidth: \"2px\",\n    borderStyle: \"solid\",\n  },\n  container_input: {\n    padding: theme.spacing(1),\n    minHeight: \"68px\",\n    backgroundColor: COLORS.green[900],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.green[400],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n    marginLeft: \"50%\",\n    textAlign: \"right\",\n  },\n  container_blank: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    borderRadius: theme.spacing(2),\n  },\n  grid: {\n    height: \"60px\",\n  },\n  fab: {\n    zIndex: \"0\",\n  },\n  input: {\n    ...theme.typography.h5,\n    width: \"100%\",\n  },\n  inputBase: {\n    textAlign: \"right\",\n    color: COLORS.green[50],\n  },\n  inputBase2: {\n    textAlign: \"right\",\n    color: COLORS.green[50],\n  },\n}));\n\nCoinField.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  symbol: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  activeField: PropTypes.bool.isRequired,\n};\n\nexport function RemoveLiquidityField1(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{\n              root: classes.container_input,\n              input: classes.inputBase,\n            }}\n          />\n        </Grid>\n        {/* </div> */}\n      </Grid>\n    </div>\n  );\n}\n\nexport function RemoveLiquidityField2(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol } = props;\n\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default function CoinField(props) {\n  // This component is used to selecting a token and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{ root: classes.input, input: classes.inputBase }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    width: \"100%\",\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textAlign: \"center\",\n    \"&:hover, &$focusVisible\": {\n      backgroundColor: COLORS.green[900],\n      color: COLORS.blue[100],\n      \n    },\n  },\n  coinName: {\n    opacity: 0.6,\n    \n  },\n  coinImage: {\n    width: 30, // Adjust the image width as needed\n    height: 30, // Adjust the image height as needed\n    marginRight: theme.spacing(3), // Adjust the margin as needed\n  },\n}));\n\nCoinButton.propTypes = {\n  coinName: PropTypes.string.isRequired,\n  coinAbbr: PropTypes.string.isRequired,\n  imageURI: PropTypes.string, // Define imageURI as a prop\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default function CoinButton(props) {\n  const { coinName, coinAbbr, imageURI, onClick, ...other } = props;\n  const classes = useStyles();\n\n  return (\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\n      <Grid container alignItems=\"center\">\n        {imageURI && (\n          <Grid item>\n            <img src={imageURI} alt={`${coinName} Logo`} className={classes.coinImage} />\n          </Grid>\n        )}\n        <Grid item style={{ textAlign: \"left\" }}>\n          <Typography variant=\"h6\">{coinAbbr}</Typography>\n          <Typography variant=\"body2\" className={classes.coinName}>\n            {coinName}\n          </Typography>\n        </Grid>\n      </Grid>\n    </ButtonBase>\n  );\n}\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  TextField,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CoinButton from \"./CoinButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n    backgroundColor: COLORS.grey[500],\n    color: COLORS.green[1000],\n    \n  },\n  titleSection: {\n    padding: theme.spacing(2),\n    \n  },\n  titleText: {\n    alignSelf: \"center\",\n  },\n  hr: {\n    margin: 0,\n  },\n  address: {\n    paddingLeft: theme.spacing(2.5),\n    paddingRight: theme.spacing(2.5),\n    paddingBottom: theme.spacing(2),\n  },\n  coinList: {\n    height: \"300px\",\n    overflowY: \"scroll\",\n    color: COLORS.green[50],\n    backgroundColor: COLORS.grey[800],\n  },\n  coinContainer: {\n    paddingLeft: theme.spacing(1.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    overflow: \"hidden\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classes.titleSection}\n      {...other}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignContent=\"center\"\n      >\n        <Typography variant=\"h6\" className={classes.titleText}>\n          {children}\n        </Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </Grid>\n    </MuiDialogTitle>\n  );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n    backgroundColor: COLORS.grey[500],\n  },\n}))(MuiDialogActions);\n\nCoinDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  coins: PropTypes.array.isRequired,\n};\n\nexport default function CoinDialog(props) {\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n  // addresses will first be validated to make sure they exist.\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\n\n  const classes = useStyles();\n  const { onClose, open, coins, signer, ...others } = props;\n\n  const [address, setAddress] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  // Called when the user tries to input a custom address, this function will validate the address and will either\n  // then close the dialog and return the validated address, or will display an error.\n  const submit = () => {\n    if (doesTokenExist(address, signer)) {\n      exit(address);\n    } else {\n      setError(\"This address is not valid\");\n    }\n  };\n\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n  const exit = (value) => {\n    setError(\"\");\n    setAddress(\"\");\n    onClose(value);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => exit(undefined)}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <DialogTitle onClose={() => exit(undefined)}>Select Token</DialogTitle>\n\n      <hr className={classes.hr} />\n\n      <div className={classes.coinContainer}>\n        <Grid container direction=\"column\" spacing={2} alignContent=\"center\">\n          <TextField\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n            variant=\"outlined\"\n            placeholder=\"Paste Token Address\"\n            error={error !== \"\"}\n            helperText={error}\n            fullWidth\n            className={classes.address}\n          />\n\n          <hr className={classes.hr} />\n\n          <Grid item className={classes.coinList}>\n            <Grid container direction=\"column\">\n              {/* Maps all of the tokens in the constants file to buttons */}\n              {coins.map((coin, index) => (\n                <Grid item key={index} xs={28}>\n                  <CoinButton\n                    coinName={coin.name}\n                    coinAbbr={coin.abbr}\n                    imageURI={coin.imageURI}\n                    onClick={() => exit(coin.address)}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n\n      <hr className={classes.hr} />\n\n      <DialogActions>\n        <Button autoFocus onClick={submit} >\n          <b>ENTER</b>\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: 0,\n    position: \"relative\",\n  },\n  progress: {\n    color: green[500],\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nexport default function LoadingButton(props) {\n  const classes = useStyles();\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth\n        disabled={loading || !valid}\n        type=\"submit\"\n        onClick={onClick}\n        {...other}\n      >\n        {children}\n      </Button>\n      {loading && <CircularProgress size={24} className={classes.progress} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nexport default function WrongNetwork(props) {\n\n  const classes = useStyles();\n  const {open} = props;\n  return (\n    <Dialog\n      open={open}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <MuiDialogTitle>Unsupported Network. Switch to pulsechain.</MuiDialogTitle>\n    </Dialog>\n  );\n}\n","\nimport React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getNetwork,\n  getAmountOut,\n  getBalanceAndSymbol,\n  getWeth,\n  swapTokens,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\n\n\nconst styles = (theme) => ({\n  paperContainer: {\n    backgroundColor: COLORS.grey[800],\n    color: COLORS.green[50],\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(.8),\n    backgroundColor: COLORS.green[50],\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"left\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n    imageURI: \"https://dextop.pro/swap/exe.jpg\"\n    \n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  footer: {\n    marginTop: \"285px\",\n  },\n  \n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      !isNaN(parsedInput1) &&\n      !isNaN(parsedInput2) &&\n      0 < parsedInput1 &&\n      parsedInput1 <= coin1.balance\n    );\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n\n    swapTokens(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n    \n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 5000,\n        });\n      });\n      \n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address) {\n      getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(\n        (data) => setReserves(data)\n      );\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.router, props.network.signer]);\n\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\n      getAmountOut(coin1.address, coin2.address, field1Value, props.network.router, props.network.signer).then(\n        (amount) => setField2Value(amount.toFixed(7))\n      ).catch(e => {\n        console.log(e);\n        setField2Value(\"NA\");\n      })\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, coin1.address, coin2.address]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log('props: ', props);\n      console.log(\"Checking balances...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => setReserves(data));\n      }\n\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        props={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n        />\n\n      {/* Coin Swapper */}\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n        <Grid container alignItems=\"center\">\n  <Grid item>\n    <div style={{ borderRadius: '50%', overflow: 'hidden', width: '40px', height: '40px', marginRight: '10px', marginLeft: '10px' , margin: '10px' }}>\n      <img src=\"https://dextop.pro/swap/exe.jpg\" alt=\"DexTop Icon\" style={{ width: '100%', height: 'auto' }} />\n    </div>\n  </Grid>\n  <Grid item>\n  <Typography variant=\"h6\" className={classes.title} style={{ fontFamily: 'Rubik, sans-serif' }}>\n  DexTop Swap\n</Typography>\n  </Grid>\n</Grid>\n\n\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                onChange={handleChange.field1}\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <IconButton onClick={switchFields} className={classes.switchButton}>\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\n            </IconButton>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={false}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\" >Your Balances</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin1.balance, coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin2.balance, coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            <Typography variant=\"h6\" >Reserves</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            <LoadingButton\n              loading={loading}\n              valid={isButtonEnabled()}\n              success={false}\n              fail={false}\n              onClick={swap}\n            >\n              <LoopIcon />\n              Swap\n            </LoadingButton>\n          </Grid>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n        DexTop{\" \"}\n          <a href=\"https://dextop.pro/\" style={{ fontFamily: 'Rubik, sans-serif' }}>here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default CoinSwapper;","import React from \"react\";\nimport { ButtonGroup, Button } from \"@material-ui/core\";\n\nexport default function SwitchButton(props) {\n  const { setDeploy } = props;\n\n  const changeStyles = (K) => {\n    if (K === true) {\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#ff0000\";\n\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#9e9e9e\";\n    } else {\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#ff0000\";\n\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#9e9e9e\";\n    }\n  };\n\n  return (\n    <div>\n      <ButtonGroup size=\"large\" variant=\"contained\">\n        <Button\n          id=\"add-button\"\n          color=\"primary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(true);\n            changeStyles(true);\n          }}\n        >\n          Add Liquidity\n        </Button>\n\n        <Button\n          id=\"remove-button\"\n          color=\"secondary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(false);\n            changeStyles(false);\n          }}\n        >\n          Remove Liquidity\n        </Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n","import { Contract, ethers } from \"ethers\";\nimport { fetchReserves, getDecimals } from \"../ethereumFunctions\";\n\nconst PRC20 = require(\"../build/ERC20.json\");\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's coin to add\n//    `amount2` - A float or similar number representing the value of address2's coin to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const token1 = new Contract(address1, PRC20.abi, signer);\n  const token2 = new Contract(address2, PRC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const amountIn1 = ethers.utils.parseUnits(amount1, token1Decimals);\n  const amountIn2 = ethers.utils.parseUnits(amount2, token2Decimals);\n\n  const amount1Min = ethers.utils.parseUnits(amount1min, token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(amount2min, token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  // Check current allowances for both tokens\n  const currentAllowance1 = await token1.allowance(account, routerContract.address);\n  const currentAllowance2 = await token2.allowance(account, routerContract.address);\n\n  // Approve both tokens only if needed\n  if (currentAllowance1.lt(amountIn1) || currentAllowance2.lt(amountIn2)) {\n    const approvalPromises = [];\n\n    if (currentAllowance1.lt(amountIn1)) {\n      approvalPromises.push(token1.approve(routerContract.address, amountIn1));\n    }\n\n    if (currentAllowance2.lt(amountIn2)) {\n      approvalPromises.push(token2.approve(routerContract.address, amountIn2));\n    }\n\n    // Execute both approvals concurrently\n    await Promise.all(approvalPromises);\n  }\n\n  // Check updated allowances after approvals\n  const updatedAllowance1 = await token1.allowance(account, routerContract.address);\n  const updatedAllowance2 = await token2.allowance(account, routerContract.address);\n\n  // Proceed with liquidity addition if both token allowances meet the required amounts\n  if (updatedAllowance1.gte(amountIn1) && updatedAllowance2.gte(amountIn2)) {\n    const wplsAddress = await routerContract.WPLS();\n\n    console.log([\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n    ]);\n\n    if (address1 === wplsAddress) {\n      // Eth + Token\n      await routerContract.addLiquidityPLS(\n        address2,\n        amountIn2,\n        amount2Min,\n        amount1Min,\n        account,\n        deadline,\n        { value: amountIn1 }\n      );\n    } else if (address2 === wplsAddress) {\n      // Token + Eth\n      await routerContract.addLiquidityPLS(\n        address1,\n        amountIn1,\n        amount1Min,\n        amount2Min,\n        account,\n        deadline,\n        { value: amountIn2 }\n      );\n    } else {\n      // Token + Token\n      await routerContract.addLiquidity(\n        address1,\n        address2,\n        amountIn1,\n        amountIn2,\n        amount1Min,\n        amount2Min,\n        account,\n        deadline\n      );\n    }\n  }\n}\n\n\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const token1 = new Contract(address1, PRC20.abi, signer);\n  const token2 = new Contract(address2, PRC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const Getliquidity = (liquidity_tokens) => {\n    if (liquidity_tokens < 0.001) {\n      return ethers.BigNumber.from(liquidity_tokens * 10 ** 18);\n    }\n    return ethers.utils.parseUnits(String(liquidity_tokens), 18);\n  };\n\n  const liquidity = Getliquidity(liquidity_tokens);\n  console.log('liquidity: ', liquidity);\n\n  const amount1Min = ethers.utils.parseUnits(String(amount1min), token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(String(amount2min), token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const wplsAddress = await routerContract.WPLS();\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const currentAllowance = await pair.allowance(account, routerContract.address);\n\n  // Approve liquidity tokens only if needed\n  if (currentAllowance.lt(liquidity)) {\n    console.log('Approving liquidity tokens...');\n    const approveTx = await pair.approve(routerContract.address, liquidity);\n    await approveTx.wait(); // Wait for approval transaction to be mined\n    console.log('Liquidity tokens approved!');\n  } else {\n    console.log('Sufficient allowance for liquidity tokens exists.');\n  }\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wplsAddress) {\n    // Eth + Token\n    await routerContract.removeLiquidityPLS(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === wplsAddress) {\n    // Token + Eth\n    await routerContract.removeLiquidityPLS(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\nconst quote = (amount1, reserve1, reserve2) => {\n  const amount2 = amount1 * (reserve2 / reserve1);\n  return [amount2];\n};\n\n\n// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nasync function quoteMintLiquidity(\n  address1,\n  address2,\n  amountA,\n  amountB,\n  factory,\n  signer\n){\n  const MINIMUM_LIQUIDITY = 1000;\n  let _reserveA = 0;\n  let _reserveB = 0;\n  let totalSupply = 0;\n  [_reserveA, _reserveB, totalSupply] = await factory.getPair(address1, address2).then(async (pairAddress) => {\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\n      const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n      const reserveA = reservesRaw[0];\n      const reserveB = reservesRaw[1];\n    \n      const _totalSupply = await pair.totalSupply();\n      const totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n      return [reserveA, reserveB, totalSupply]\n    } else {\n      return [0,0,0]\n    }\n  });\n\n  const token1 = new Contract(address1, PRC20.abi, signer);\n  const token2 = new Contract(address2, PRC20.abi, signer);\n\n  // Need to do all the decimals work to account for 0 decimal numbers\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const valueA = amountA*(10**token1Decimals);\n  const valueB = amountB*(10**token2Decimals);\n\n  const reserveA = _reserveA*(10**token1Decimals);\n  const reserveB = _reserveB*(10**token2Decimals);\n\n  if (totalSupply == 0){\n    return Math.sqrt(((valueA * valueB)-MINIMUM_LIQUIDITY))*10**(-18);\n  };\n  \n  return (\n    Math.min(valueA*totalSupply/reserveA, valueB*totalSupply/reserveB)\n  );\n};\n\nexport async function quoteAddLiquidity(\n  address1,\n  address2,\n  amountADesired,\n  amountBDesired,\n  factory,\n  signer\n) {\n\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  if (reserveA === 0 && reserveB === 0) {\n    const amountOut = await quoteMintLiquidity(\n      address1,\n      address2,\n      amountADesired,\n      amountBDesired,\n      factory,\n      signer);\n    return [\n      amountADesired,\n      amountBDesired,\n      amountOut.toPrecision(8),\n    ];\n  } else {\n    const amountBOptimal = quote(amountADesired, reserveA, reserveB);\n    if (amountBOptimal <= amountBDesired) {\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountADesired,\n        amountBOptimal,\n        factory,\n        signer);\n      return [\n        amountADesired,\n        amountBOptimal,\n        amountOut.toPrecision(8),\n      ];\n    } else {\n      const amountAOptimal = quote(\n        amountBDesired,\n        reserveB,\n        reserveA\n      );\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountAOptimal,\n        amountBDesired,\n        factory,\n        signer);\n      return [\n        amountAOptimal,\n        amountBDesired,\n        amountOut.toPrecision(8),\n      ];\n    }\n  }\n}\n\n// Function used to get a quote of the liquidity removal\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteRemoveLiquidity(\n  address1,\n  address2,\n  liquidity,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  console.log(\"pair address\", pairAddress);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  const feeOn =\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\n\n  const _kLast = await pair.kLast();\n  const kLast = Number(ethers.utils.formatEther(_kLast));\n\n  const _totalSupply = await pair.totalSupply();\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n\n  if (feeOn && kLast > 0) {\n    const feeLiquidity =\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\n    totalSupply = totalSupply + feeLiquidity;\n  }\n\n  const Aout = (reserveA * liquidity) / totalSupply;\n  const Bout = (reserveB * liquidity) / totalSupply;\n\n  return [liquidity, Aout, Bout];\n}\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getBalanceAndSymbol,\n  getReserves,\n} from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\n\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the user's balance of liquidity tokens for the current pair\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Used when getting a quote of liquidity\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      parsedInput1 !== NaN &&\n      0 < parsedInput1 &&\n      parsedInput2 !== NaN &&\n      0 < parsedInput2 &&\n      parsedInput1 <= coin1.balance &&\n      parsedInput2 <= coin2.balance\n    );\n  };\n\n\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      field2Value,\n      '0',\n      '0',\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n        ).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity deployment.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      quoteAddLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        field2Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        console.log(\"Liquidity out: \", data[2]);\n        setLiquidityOut([data[0], data[1], data[2]]);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, field2Value, props.network.factory, props.network.signer]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Liquidity deployer */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.networksigner}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field2Value}\n            onClick={() => setDialog2Open(true)}\n            onChange={handleChange.field2}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"DEXT-V1\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(liquidityOut[2], \"DEXT-V1\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <hr className={classes.hr} />\n      </Grid>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getBalanceAndSymbol,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\nimport {\n  RemoveLiquidityField1,\n  RemoveLiquidityField2,\n} from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityRemover(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the liquidity tokens balance of the user\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Stores the input and output for the liquidity removal preview\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput = parseFloat(field1Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      parsedInput !== NaN &&\n      0 < parsedInput &&\n      parsedInput <= liquidityTokens\n    );\n  };\n\n  const remove = () => {\n    console.log(\"Attempting to remove liquidity...\");\n    setLoading(true);\n\n    removeLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      0,\n      0,\n      props.network.router,\n      props.network.account,\n      props.network.signer,\n      props.network.factory\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 7000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity removal.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity removal\");\n      quoteRemoveLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        setTokensOut(data);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, props.network.factory, props.network.signer]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address, props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Coin Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField1\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField2\n            activeField={true}\n            onClick={() => setDialog2Open(true)}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"DEXT-V1\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[0], \"DEXT-V1\")}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[1], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[2], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n        <hr className={classes.hr} />\n      </Grid>\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={remove}\n        >\n          <ArrowDownwardIcon className={classes.buttonIcon} />\n          Remove\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityRemover;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nimport SwitchButton from \"./SwitchButton\";\nimport LiquidityDeployer from \"./LiquidityDeployer\";\nimport LiquidityRemover from \"./RemoveLiquidity\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n    backgroundColor: COLORS.grey[800],\n    color: COLORS.green[200],\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Liquidity(props) {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = (deploy) => {\n    if (deploy === true) {\n      return <LiquidityDeployer network={props.network}/>;\n    }\n    return <LiquidityRemover network={props.network}/>;\n  };\n\n  return (\n    <div>\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            <SwitchButton setDeploy={setDeploy} />\n          </Typography>\n\n          {deploy_or_remove(deploy)}\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n         DexTop{\" \"}\n          <a href=\"https://dextop.pro/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Liquidity;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport Web3Provider from \"./network\";\nimport NarBar from \"./NavBar/NavBar\";\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\nimport { Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport Liquidity from \"./Liquidity/Liquidity\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <SnackbarProvider maxSnack={3}>\n        <ThemeProvider theme={theme}>\n          <Web3Provider\n            render={(network) => (\n              <div>\n                <NarBar />\n                <Route exact path=\"/swap/\">\n                  <CoinSwapper network={network} />\n                </Route>\n\n                <Route exact path=\"/swap/liquidity\">\n                  <Liquidity network={network} />\n                </Route>\n              </div>\n            )}\n          ></Web3Provider>\n        </ThemeProvider>\n      </SnackbarProvider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}